{
  "name": "Vokativ",
  "tagline": "PHP class used to convert first names from Serbian language into their vocative case.",
  "body": "# Vokativ\r\n\r\nPHP class used to convert first names from Serbian language into their vocative case.\r\n\r\n## Introduction\r\n\r\nSerbian language uses vocative case in order to address a person, so when someone register to a site with name Filip it is okay to greet (address) them in English with \"Hello Filip\", but in Serbian it would be \"Zdravo Filipe\", and \"Zdravo Filip\" is not correct and really sounds strange. But vocative is not as simple as appending \"e\" to a name. It has a set of rules and this PHP class tries to apply those rules to all Serbian names. If it can't, it'll use the built-in dictionary (nominative => vocative) to find a correct form.\r\n\r\nNote that it is not perfect and please notify me if you find any erroneously converted names. PRs are also welcome.\r\n\r\n## Intallation\r\n\r\nInstall using composer with:\r\n\r\n`composer require avram/vokativ`\r\n\r\nOr manually by cloning this repository:\r\n\r\n`git clone https://github.com/avramovic/Vokativ.git`\r\n\r\n## Usage\r\n\r\n### Native\r\n\r\n    <?php\r\n    require 'vendor/autoload.php';\r\n\r\n    use Avram\\Vokativ\\Vokativ;\r\n    use Avram\\Vokativ\\Dictionary\\VokativIniDictionary;\r\n\r\n    $nominativ = 'Filip';\r\n    $vokativ = new Vokativ(new VokativIniDictionary());\r\n\r\n    echo \"Vocative case for \\\"$nominativ\\\" is: \" . $vokativ->make($nominativ) . \" (source: \" . $vokativ->source() . \")\";\r\n\r\nYou should get output like this:\r\n\r\n    Vocative case for \"Filip\" is: Filipe (source: dictionary)\r\n\r\n### Laravel\r\n\r\nThis package comes with Laravel service provider and facade to make it easier to use it from any place in your code. Simply open `config/app.php` file and add this to service provider list:\r\n\r\n    Avram\\Vokativ\\Provider\\VokativServiceProvider::class,\r\n\r\nThen, right below that, in the list of facades, add this:\r\n\r\n    'Vokativ'   => Avram\\Vokativ\\Facade\\Vokativ::class,\r\n\r\nAfter that, you can use the following code anywhere in your project:\r\n\r\n    $vokativ = Vokativ::make(\"Filip\");\r\n\r\n    //or in views\r\n    Zdravo {{ Vokativ::make(\"Filip\") }}!\r\n\r\n*Note*: While this library will work fine with most names, it can fail with some. The Laravel facade provides another function, `Vokativ::safe(\"Filip\")` which will return vocative case only if it's found in the dictionary, and if not it will return nominative case (original string). For such cases you might want to extend the default dictionary, and you can do so by publishing assets from this package:\r\n\r\n    php artisan vendor:publish\r\n\r\nThis will copy the dictionary files into `storage/avram/vokativ` and since the Laravel integraton uses INI file by default, you'll want to edit `storage/avram/vokativ/vokativ.ini`. The facade will automatically switch to using published dictionary once it's published.\r\n\r\n### Symfony Bundle\r\nThis package comes bundled with a Symfony service and a Twig extension. To enable it, add:\r\n\r\n    new Avram\\Vokativ\\VokativBundle\\AvramVokativBundle(),\r\n    \r\nto `$bundles` array in `AppKernel.php`. Then, you can use them in your Symfony code:\r\n\r\n    // in Twig \r\n    Zdravo {{ \"Filip\"|vokativ }}!\r\n    // in controllers\r\n    $vokativ = $this->get(\"avram_vokativ.generator\")->make(\"Filip\");\r\n",
  "google": "UA-369402-10",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}